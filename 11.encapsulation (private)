# Encapsulation = Ability for an object to have certain methods and attributes available for use publicly.
                  Ability of objects to hide their constituent data behind an abstract interface.
                  Helps you keep a lot of functionality within your classse, and gives you the security of only have a few ways for the world to manipulate your object's data.
                  

# Benefit of using encapulation:
    You can perform checks on the data before assigning it to the objects.
    
    
# If you set the object variables public, you can use them directly (ex. set_first_name) from any code where you have the Class.
# However, "Encapsulation" lets you hide certain object variables until you need to use them.



# Example: 

class Princess
   def initialize(name)
      set_name(name)
   end
   

def name 
   @first_name + ' ' + @last_name
end




private              # "private" tells Ruby that any method declared in this class from there should be kept private.
                     # Only codes from within the object's methods can access the private methods, and codes outside cannot access it.

def set_name(name)
   first_name, last_name = name.split(/\s+/)
   set_first_name(first_name)
   set_last_name(last_name)
end


def set_first_name(name)
   @first_name = name
end


def set_last_name(name)
   @last_name = name
end

end



# If you wrote "p = Princess.name( "Princess Bubblegum")  p.set_last_name("Sticky Gum") it won't work.
